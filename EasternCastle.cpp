#include "EasternCastle.h"

//Constructor.
EasternCastle::EasternCastle(ImageStore *imageStore ,  DrawRepository *drawRepository ,
        GameManager *gameManager , BattleManager *battleManager , FontStore *fontStore ,
        int layoutSize) : CustomAreaMap(imageStore , drawRepository , gameManager , 
        battleManager , fontStore , layoutSize){

            mapMusic = "Metaphysik";
}

//Destructor.
EasternCastle::~EasternCastle(){
}

//Loads the enemies and level ranges for the map.
void EasternCastle::loadMapEnemies(){

    //Easy
    this->listOfEnemies.push_back(SOLDIER);
    this->listOfEnemies.push_back(KUNGFOO_DOG);
    
    //Medium
    this->listOfEnemies.push_back(NINJA_FOX);
    this->listOfEnemies.push_back(FANGED_FOX);
    
    //Hard
    this->listOfEnemies.push_back(SHEEP);

    this->loadEnemyLevelRange(7 , 9);
}

//Loads all the cloud Scenery objects.
void EasternCastle::loadTheSceneries(){

    FilterImage *darkness = new FilterImage(imageStore->getBitMap("darkness") ,
        0 , 0 , 0 , 0);
    Lightning *lightning = new Lightning(imageStore);
    Rain *rainSlow = new Rain(imageStore->getBitMap("rain") ,
        0 , -(SCREEN_H / 2) , 0 , 3);
    Rain *rainFast = new Rain(imageStore->getBitMap("rain") ,
        0 , -(SCREEN_H / 2) , 0 , 5);

    darkness->setTransparencyLevel(.5);
    darkness->setTransparencyIncrementer(.01);
    darkness->setRedTransparency(1);
    darkness->setGreenTransparency(1);
    darkness->setBlueTransparency(1);

    this->loadScenery(darkness);
    this->loadScenery(lightning);
    this->loadScenery(rainSlow);
    this->loadScenery(rainFast);
}

//Load the interactive models.
void EasternCastle::loadTheTangibles(){

    std::string identifierName = "Guardian"; //Used when deleting the Tangible once the fight is over.

    NPCWithDialogueThenBattle *guardian = new NPCWithDialogueThenBattle(imageStore->getBitMap("Guardian") ,
        Conversion::convertTilesToPixels(18) , 
        Conversion::convertTilesToPixels(42) ,        
        this->drawRepository ,
        this->gameManager , "You shall not pass!" ,
        this->battleManager ,
        this->fontStore->getFont("default") ,
        identifierName); 

    guardian->createCharacter(160 , 80 , 60 , 1 , 4 , this);
    guardian->setIdentifierName(identifierName);
    guardian->setMusic("Split In Synapse");

    std::vector<int> enemies;
    enemies.push_back(RAT);
    enemies.push_back(GUARDIAN);
    enemies.push_back(RAT);

    std::vector<int> enemyLevels;
    enemyLevels.push_back(9);
    enemyLevels.push_back(9);
    enemyLevels.push_back(9);

    guardian->loadEnemies(enemies , enemyLevels);

    //Eyepatch Cat quest.
    NPCWithDialogueAndQuest *escapedPrisoner = new NPCWithDialogueAndQuest(
        imageStore->getBitMap("npcEyepatchCat") ,
        Conversion::convertTilesToPixels(3) , 
        Conversion::convertTilesToPixels(28) ,
        this->drawRepository ,
        this->gameManager ,
        this->fontStore->getFont("default") ,
        this->gameManager->getPlayerEntity()
        );
    escapedPrisoner->createCharacter(32 , 32 , 60 , 2 , 4 , this);
    escapedPrisoner->setCW(32);
    escapedPrisoner->setCH(32);
    escapedPrisoner->setCharacterFacing(DOWN);
    escapedPrisoner->setQuestExplanation(
        "Escaped Prisoner: I just barely made it out alive. They are doing "
        "terrible things inside. I'm exhausted and can barely run. Please "
        "clear the way for me so I can get back to the village.");
    escapedPrisoner->setQuestReminder(
        "Escaped Prisoner: Are you close to being done?");
    escapedPrisoner->setQuestCompleteMessage(
        "Escaped Prisoner: I can see that you cleared the path. Thank you "
        "thank you! It's not much, but I'll teach you something worthwhile.");
    escapedPrisoner->setRewardNotification(
        "Thief received Knife Barrage ability!");
    escapedPrisoner->setGift("thief" , "Knife Barrage");
    escapedPrisoner->setQuestAfterCompleteMessage(
        "Escaped Prisoner: Thank you again. I'm headed back soon, "
        "once I catch my breath. I saw something shiny in those "
        "barrels back there...");

    KillQuest *killTask = new KillQuest();
    killTask->setQuestDisplayName("Security Breach");
    killTask->addObjective("Soldier" , 2);
    killTask->addObjective("Ninja Fox" , 2);
    killTask->addObjective("Fanged Fox" , 4);
    killTask->setMustBeActiveForPlayerToUpdate();
    escapedPrisoner->loadQuest(killTask);
    gameManager->getPlayerEntity()->addQuest("securityBreach" , killTask);

    //Jomk quest
    NPCWithDialogueAndQuest *jomk = new NPCWithDialogueAndQuest(
        imageStore->getBitMap("npcGreenCrownMage") ,
        Conversion::convertTilesToPixels(8) , 
        Conversion::convertTilesToPixels(16) ,
        this->drawRepository ,
        this->gameManager ,
        this->fontStore->getFont("default") ,
        this->gameManager->getPlayerEntity()
        );
    jomk->createCharacter(32 , 32 , 60 , 2 , 4 , this);
    jomk->setCW(32);
    jomk->setCH(32);
    jomk->setCharacterFacing(DOWN);
    jomk->setQuestExplanation(
        "Jomk: Yo, you need to help kill that huge dog that's guarding the "  
        "entrance to the castle. Once, it's open, you can go in and see " 
        "what's inside. ");
    jomk->setQuestReminder(
        "Jomk: Are you done yet? ");
    jomk->setQuestCompleteMessage(
        "Jomk: Wow, took long enough. Here, now move outta my way!");
    jomk->setRewardNotification(
        "Warrior received the Bandage ability!");
    jomk->setGift("warrior" , "Bandage");
    jomk->setQuestAfterCompleteMessage(
        "Jomk: Alright alright, time to do some driving."
        );
    KillQuest *killLargeDog= new KillQuest();
    killLargeDog->setQuestDisplayName("Guardian of the Castlealaxy");
    killLargeDog->addObjective("Guardian" , 1);
    jomk->loadQuest(killLargeDog);
    gameManager->getPlayerEntity()->addQuest("guardianOfTheCastlealaxy" , killLargeDog);

    //Barrel quest
    NPCWithDialogueAndQuest *mageInABarrel = new NPCWithDialogueAndQuest(
        imageStore->getBitMap("sceneryBarrel") ,
        Conversion::convertTilesToPixels(36) , 
        Conversion::convertTilesToPixels(6) ,
        this->drawRepository ,
        this->gameManager ,
        this->fontStore->getFont("default") ,
        this->gameManager->getPlayerEntity()
        );
    mageInABarrel->createCharacter(28 , 38 , 1 , 1 , 1 , this);
    mageInABarrel->setCW(28);
    mageInABarrel->setCH(38);
    mageInABarrel->setCharacterFacing(UP);
    mageInABarrel->setQuestExplanation(
        "Mage in a Barrel: I use to be the most powerful mage in the north. In an "  
        "attempt to become even more powerful I began working with other elements. " 
        "I found some crystals that had the power to amplify my abilities. However, "
        "something went wrong and I ended up amplifying the natural environments "
        "that surround our beloved town. The change is irreversable but if you "
        "find me some rare items, I'll be able to live a little longer in my barrel of "
        "exile.");
    mageInABarrel->setQuestReminder(
        "Mage in a Barrel: The carrot is for business. The whiskers are for pleasure.");
    mageInABarrel->setQuestCompleteMessage(
        "Mage in a Barrel: You made it just in time. I'm famished! My greatest achievement "
        "was learning the ultimate ice spell. I'll teach it to your mage.");
    mageInABarrel->setRewardNotification(
        "Mage learned Reign of Winter!");
    mageInABarrel->setGift("mage" , "Reign of Winter");
    mageInABarrel->setQuestAfterCompleteMessage(
        "Mage in a Barrel: *Chomp chomp chomp chomp*"
        );

    GatherQuest *mageQuestObjectives = new GatherQuest(
        gameManager->getPlayerEntity()->getPlayerInventory());
    mageQuestObjectives->setQuestDisplayName("Glacial Mage is Hungry");
    mageQuestObjectives->addObjective("Carrot" , 1);
    mageQuestObjectives->addObjective("Whiskers" , 1);
    mageInABarrel->loadQuest(mageQuestObjectives);
    gameManager->getPlayerEntity()->addQuest("glacialMageIsHungry" , mageQuestObjectives);

    this->loadTangible(mageInABarrel);
    this->loadTangible(jomk);
    this->loadTangible(escapedPrisoner);
    this->loadTangible(guardian);
}

//Loads all the layers to the areaMap.
void EasternCastle::loadLayers(){

    Layer *backgroundLayer = new Layer(imageStore->getBitMap("easternCastleTerrain") ,
        50 , 50 , this->backgroundLayerLayout , 2500);
    Layer *collisionLayer = new Layer(imageStore->getBitMap("easternCastle") ,
        50 , 50 , this->collisionLayerLayout , 2500);
    Layer *canGoBehindLayer = new Layer(imageStore->getBitMap("easternCastle") ,
        50 , 50 , this->canGoBehindLayerLayout , 2500);
   
    this->loadLayer(backgroundLayer);
    this->loadLayer(collisionLayer);
    this->loadLayer(canGoBehindLayer);
}

void EasternCastle::loadBackgroundLayerMapConfiguration(){

    int backgroundLayerLayout[] = {
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,34,34,34,33,33,34,34,
        34,
        34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,
        34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,29,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1,
        1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 5, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 5, 3, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 6, 3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 6, 3, 3, 3, 3, 1, 1, 1, 1, 1, 4,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,29,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 5, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
        5, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
        3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 4, 1, 1, 1, 1, 1, 1, 3,
        3, 3, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 3, 3, 3, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
        3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 4, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 6, 3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
        3, 3, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 6,
        3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,34,34,34,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,29,29,
        29,29, 1, 1,29,29,29,29, 1, 1,34,34,34,34,34,33,33,34,34,34,33,33,34,34,34,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,29,29,29,29,29,29,29, 1, 1, 1, 1, 1, 1, 1,29,
        29,29,29,29,29,29,29,29, 1, 1,34,34,34,34,34,33,33,34,34,34,33,33,34,34,34,
        34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,
        34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,34,34,34,33,33,34,34,34,
        34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,
        34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,34,34,34,33,33,34,34,34,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
        32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,34,34,34,33,33,34,34,34
    }; 

    this->backgroundLayerLayout = new int[this->layoutSize];
    for(int i = 0 ; i < this->layoutSize ; i++)    
        this->backgroundLayerLayout[i] = backgroundLayerLayout[i];
}

void EasternCastle::loadCollisionLayerMapConfiguration(){

    int collisionLayerLayout[] ={
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,13,14,14,15, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,19,20, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0,25,26, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,30,31,32,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,30,31,32, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,33,34,34,35,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,33,34,34,34,34,35,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,33,34,34,34,34,34,34,35,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,33,34,34,34,34,34,34,34,34,35,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,33,34,34,34,34,34,34,34,34,34,34,
        35,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,21,22,21,33,34,34,34,34,34,34,34,34,34,34,34,
        34,35,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0,21,22,33,34,34,34,34,34,34,34,34,34,34,34,34,
        34,34,35,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,
        37,37,37,37,37, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,38,39,40,38,41,42,41,42,38,39,40,38,41,42,41,
        42,38,39,40,38, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,43,44,45,46,47,48,47,48,43,44,45,46,47,48,47,
        48,43,44,45,46, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,49,50,51,52,53,54,53,54,49,50,51,52,53,54,53,
        54,49,50,51,52, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,55,56,57,58,59,60,59,60,55,56,57,58,59,60,59,
        60,55,56,57,58, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
        61,61,61,61,61, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,38,39,40,38,41,42,41,42,38,39,40,38,41,42,41,
        42,38,39,40,38, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0,43,44,45,46,47,48,47,48,43,44,45,46,47,48,47,
        48,43,44,45,46, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,49,50,51,52,53,54,53,54,49,50,51,52,53,54,53,
        54,49,50,51,52,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,55,56,57,58,59,60,59,60,55,56,57,58,59,60,59,
        60,55,56,57,58,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
        61,61,61,61,61,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,36,37,37,37,37,37,37,62,63,64,65,66,67,36,37,
        37,37,37,37,37,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,68,69,69,69,69,69,69,62,70,71,71,72,67,36,69,
        69,69,69,69,69,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,36,69,69,69,69,69,69,62,73,73,73,73,67,36,69,
        69,69,69,69,69,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,61,61,61,61,61,61,61,74, 0, 0, 0, 0,75,61,61,
        61,61,61,61,61,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,30,31,32,76,77,76,77,76,77,76,77, 0, 0, 0, 0,76,77,76,
        77,76,77,76,77,30,31,32, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,78,79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
        79,79,79,79,79,79,79,79,79,79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    this->collisionLayerLayout = new int[this->layoutSize];
    for(int i = 0 ; i < this->layoutSize ; i++)    
        this->collisionLayerLayout[i] = collisionLayerLayout[i];
}

void EasternCastle::loadCanGoBehindLayerMapConfiguration(){

    int canGoBehindLayerLayout[] ={
        0, 0, 0, 0, 0, 0, 0,80,81,82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,80,81,82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0,
        1, 1, 1, 1, 1, 1, 1,83,84,85, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1,83,84,85, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,86,87,88,89,90,91,91,91,91,91,91,91,91,91,91,91,91,91,
        91,91,91,92,93,86,87,88, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,94,95,96,21,97,98,98,98,98,98,98,98,98,98,98,98,98,98,
        98,98,98,99,24,94,95,96,13,14,14,15, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,100,101,102,21,22,21,21,21,21,21,21,21,23,23,24,24,24,
        24,24,24,24,22,24,100,101,102, 0, 0,19,20, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0,25,26, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,30,31,32,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24,30,31,32, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,24,
        24,24,24,22,24, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0, 0,103, 0,21,22,21,21,21,21,21,21,21,23,23,24,24,24,
        24,24,24,24,22,24, 0,103, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
        10,11,12, 0, 0, 0, 0, 0,104, 0,21,22,21,21,21,21,21,21,33,34,34,35,24,24,
        24,24,24,24,22,24, 0,104, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
        16,17,18, 0, 0, 0, 0,105,106,107,21,22,21,21,21,21,21,33,34,34,34,34,35,24,
        24,24,24,24,22,24,105,106,107, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
        2, 3, 4, 0, 0, 0, 0,108,109,110,21,22,21,21,21,21,33,34,34,34,34,34,34,35,
        24,24,24,24,22,24,108,109,110, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
        10,11,12, 0, 0, 0, 0,80,81,82,21,22,21,21,21,33,34,34,34,34,34,34,34,34,35,
        24,24,24,22,24,80,81,82, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,83,84,85,21,22,21,21,33,34,34,34,34,34,34,34,34,34,34,
        35,24,24,22,24,83,84,85, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,86,87,88,21,22,21,33,34,34,34,34,34,34,34,34,34,34,34,
        34,35,24,22,24,86,87,88, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,94,95,96,21,22,33,34,34,34,34,34,34,34,34,34,34,34,34,
        34,34,35,22,24,94,95,96, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,100,101,102,36,37,37,37,37,37,37,37,37,37,37,37,37,37,
        37,37,37,37,37,37,100,101,102, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
        0, 0, 0, 0, 0, 0, 0,27,28,29,38,39,40,38,41,42,41,42,38,39,40,38,41,42,41,
        42,38,39,40,38,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,27,28,29,43,44,45,46,47,48,47,48,43,44,45,46,47,48,47,
        48,43,44,45,46,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,27,28,29,49,50,51,52,53,54,53,54,49,50,51,52,53,54,53,
        54,49,50,51,52,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,27,28,29,55,56,57,58,59,60,59,60,55,56,57,58,59,60,59,
        60,55,56,57,58,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,27,28,29,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
        61,61,61,61,61,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,38,39,40,38,41,42,41,42,38,39,40,38,41,42,41,
        42,38,39,40,38,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,43,44,45,46,47,48,47,48,43,44,45,46,47,48,47,
        48,43,44,45,46,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,49,50,51,52,53,54,53,54,49,50,51,52,53,54,53,
        54,49,50,51,52,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,55,56,57,58,59,60,59,60,55,56,57,58,59,60,59,
        60,55,56,57,58,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
        61,61,61,61,61,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,36,37,37,37,37,37,37,62,63,64,65,66,67,36,37,
        37,37,37,37,37,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,27,28,29,68,69,69,69,69,69,69,62,70,71,71,72,67,36,69,
        69,69,69,69,69,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0,27,28,29,111,112,111,112,111,112,111,112,73,73,73,73,
        111,112,111,112,111,112,111,112,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0,27,28,29,113,114,113,114,113,114,113,114, 0, 0, 0, 0,
        113,114,113,114,113,114,113,114,27,28,29, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
        2, 3, 4, 0, 0, 0, 0,30,31,32,76,77,76,77,76,77,76,77, 0, 0, 0, 0,76,77,76,
        77,76,77,76,77,30,31,32, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10,11,12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,78,79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16,17,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,
        79,79,79,79,79,79,79,79,79,79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    this->canGoBehindLayerLayout = new int[this->layoutSize];

    for(int i = 0 ; i < this->layoutSize ; i++)    
        this->canGoBehindLayerLayout[i] = canGoBehindLayerLayout[i];
}